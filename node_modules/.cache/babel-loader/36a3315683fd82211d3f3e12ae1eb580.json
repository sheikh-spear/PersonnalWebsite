{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Float32BufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, Vector3 } from 'three';\n\nfunction computeTangents(geometry) {\n  geometry.computeTangents();\n  console.warn('THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead.');\n}\n/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\n\n\nfunction mergeBufferGeometries(geometries) {\n  var useGroups = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var isIndexed = geometries[0].index !== null;\n  var attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  var morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));\n  var attributes = {};\n  var morphAttributes = {};\n  var morphTargetsRelative = geometries[0].morphTargetsRelative;\n  var mergedGeometry = new BufferGeometry();\n  var offset = 0;\n\n  for (var i = 0; i < geometries.length; ++i) {\n    var geometry = geometries[i];\n    var attributesCount = 0; // ensure that all geometries are indexed, or none\n\n    if (isIndexed !== (geometry.index !== null)) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n      return null;\n    } // gather attributes, exit early if they're different\n\n\n    for (var name in geometry.attributes) {\n      if (!attributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n        return null;\n      }\n\n      if (attributes[name] === undefined) attributes[name] = [];\n      attributes[name].push(geometry.attributes[name]);\n      attributesCount++;\n    } // ensure geometries have the same number of attributes\n\n\n    if (attributesCount !== attributesUsed.size) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.');\n      return null;\n    } // gather morph attributes, exit early if they're different\n\n\n    if (morphTargetsRelative !== geometry.morphTargetsRelative) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.');\n      return null;\n    }\n\n    for (var _name in geometry.morphAttributes) {\n      if (!morphAttributesUsed.has(_name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.');\n        return null;\n      }\n\n      if (morphAttributes[_name] === undefined) morphAttributes[_name] = [];\n\n      morphAttributes[_name].push(geometry.morphAttributes[_name]);\n    } // gather .userData\n\n\n    mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n    mergedGeometry.userData.mergedUserData.push(geometry.userData);\n\n    if (useGroups) {\n      var count = void 0;\n\n      if (isIndexed) {\n        count = geometry.index.count;\n      } else if (geometry.attributes.position !== undefined) {\n        count = geometry.attributes.position.count;\n      } else {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute');\n        return null;\n      }\n\n      mergedGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  } // merge indices\n\n\n  if (isIndexed) {\n    var indexOffset = 0;\n    var mergedIndex = [];\n\n    for (var _i = 0; _i < geometries.length; ++_i) {\n      var index = geometries[_i].index;\n\n      for (var j = 0; j < index.count; ++j) {\n        mergedIndex.push(index.getX(j) + indexOffset);\n      }\n\n      indexOffset += geometries[_i].attributes.position.count;\n    }\n\n    mergedGeometry.setIndex(mergedIndex);\n  } // merge attributes\n\n\n  for (var _name2 in attributes) {\n    var mergedAttribute = mergeBufferAttributes(attributes[_name2]);\n\n    if (!mergedAttribute) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + _name2 + ' attribute.');\n      return null;\n    }\n\n    mergedGeometry.setAttribute(_name2, mergedAttribute);\n  } // merge morph attributes\n\n\n  for (var _name3 in morphAttributes) {\n    var numMorphTargets = morphAttributes[_name3][0].length;\n    if (numMorphTargets === 0) break;\n    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n    mergedGeometry.morphAttributes[_name3] = [];\n\n    for (var _i2 = 0; _i2 < numMorphTargets; ++_i2) {\n      var morphAttributesToMerge = [];\n\n      for (var _j = 0; _j < morphAttributes[_name3].length; ++_j) {\n        morphAttributesToMerge.push(morphAttributes[_name3][_j][_i2]);\n      }\n\n      var mergedMorphAttribute = mergeBufferAttributes(morphAttributesToMerge);\n\n      if (!mergedMorphAttribute) {\n        console.error('THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + _name3 + ' morphAttribute.');\n        return null;\n      }\n\n      mergedGeometry.morphAttributes[_name3].push(mergedMorphAttribute);\n    }\n  }\n\n  return mergedGeometry;\n}\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\n\n\nfunction mergeBufferAttributes(attributes) {\n  var TypedArray;\n  var itemSize;\n  var normalized;\n  var arrayLength = 0;\n\n  for (var i = 0; i < attributes.length; ++i) {\n    var attribute = attributes[i];\n\n    if (attribute.isInterleavedBufferAttribute) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.');\n      return null;\n    }\n\n    if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n\n    if (TypedArray !== attribute.array.constructor) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.');\n      return null;\n    }\n\n    if (itemSize === undefined) itemSize = attribute.itemSize;\n\n    if (itemSize !== attribute.itemSize) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.');\n      return null;\n    }\n\n    if (normalized === undefined) normalized = attribute.normalized;\n\n    if (normalized !== attribute.normalized) {\n      console.error('THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.');\n      return null;\n    }\n\n    arrayLength += attribute.array.length;\n  }\n\n  var array = new TypedArray(arrayLength);\n  var offset = 0;\n\n  for (var _i3 = 0; _i3 < attributes.length; ++_i3) {\n    array.set(attributes[_i3].array, offset);\n    offset += attributes[_i3].array.length;\n  }\n\n  return new BufferAttribute(array, itemSize, normalized);\n}\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\n\n\nfunction interleaveAttributes(attributes) {\n  // Interleaves the provided attributes into an InterleavedBuffer and returns\n  // a set of InterleavedBufferAttributes for each attribute\n  var TypedArray;\n  var arrayLength = 0;\n  var stride = 0; // calculate the the length and type of the interleavedBuffer\n\n  for (var i = 0, l = attributes.length; i < l; ++i) {\n    var attribute = attributes[i];\n    if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n\n    if (TypedArray !== attribute.array.constructor) {\n      console.error('AttributeBuffers of different types cannot be interleaved');\n      return null;\n    }\n\n    arrayLength += attribute.array.length;\n    stride += attribute.itemSize;\n  } // Create the set of buffer attributes\n\n\n  var interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);\n  var offset = 0;\n  var res = [];\n  var getters = ['getX', 'getY', 'getZ', 'getW'];\n  var setters = ['setX', 'setY', 'setZ', 'setW'];\n\n  for (var j = 0, _l = attributes.length; j < _l; j++) {\n    var _attribute = attributes[j];\n    var itemSize = _attribute.itemSize;\n    var count = _attribute.count;\n    var iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, _attribute.normalized);\n    res.push(iba);\n    offset += itemSize; // Move the data for each attribute into the new interleavedBuffer\n    // at the appropriate offset\n\n    for (var c = 0; c < count; c++) {\n      for (var k = 0; k < itemSize; k++) {\n        iba[setters[k]](c, _attribute[getters[k]](c));\n      }\n    }\n  }\n\n  return res;\n}\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\n\n\nfunction estimateBytesUsed(geometry) {\n  // Return the estimated memory used by this geometry in bytes\n  // Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n  // for InterleavedBufferAttributes.\n  var mem = 0;\n\n  for (var name in geometry.attributes) {\n    var attr = geometry.getAttribute(name);\n    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n  }\n\n  var indices = geometry.getIndex();\n  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n  return mem;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry>}\n */\n\n\nfunction mergeVertices(geometry) {\n  var tolerance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-4;\n  tolerance = Math.max(tolerance, Number.EPSILON); // Generate an index buffer if the geometry doesn't have one, or optimize it\n  // if it's already available.\n\n  var hashToIndex = {};\n  var indices = geometry.getIndex();\n  var positions = geometry.getAttribute('position');\n  var vertexCount = indices ? indices.count : positions.count; // next value for triangle indices\n\n  var nextIndex = 0; // attributes and new attribute arrays\n\n  var attributeNames = Object.keys(geometry.attributes);\n  var attrArrays = {};\n  var morphAttrsArrays = {};\n  var newIndices = [];\n  var getters = ['getX', 'getY', 'getZ', 'getW']; // initialize the arrays\n\n  for (var i = 0, l = attributeNames.length; i < l; i++) {\n    var name = attributeNames[i];\n    attrArrays[name] = [];\n    var morphAttr = geometry.morphAttributes[name];\n\n    if (morphAttr) {\n      morphAttrsArrays[name] = new Array(morphAttr.length).fill().map(function () {\n        return [];\n      });\n    }\n  } // convert the error tolerance to an amount of decimal places to truncate to\n\n\n  var decimalShift = Math.log10(1 / tolerance);\n  var shiftMultiplier = Math.pow(10, decimalShift);\n\n  for (var _i4 = 0; _i4 < vertexCount; _i4++) {\n    var index = indices ? indices.getX(_i4) : _i4; // Generate a hash for the vertex attributes at the current index 'i'\n\n    var hash = '';\n\n    for (var j = 0, _l2 = attributeNames.length; j < _l2; j++) {\n      var _name4 = attributeNames[j];\n      var attribute = geometry.getAttribute(_name4);\n      var itemSize = attribute.itemSize;\n\n      for (var k = 0; k < itemSize; k++) {\n        // double tilde truncates the decimal value\n        hash += \"\".concat(~~(attribute[getters[k]](index) * shiftMultiplier), \",\");\n      }\n    } // Add another reference to the vertex if it's already\n    // used by another index\n\n\n    if (hash in hashToIndex) {\n      newIndices.push(hashToIndex[hash]);\n    } else {\n      // copy data to the new index in the attribute arrays\n      for (var _j2 = 0, _l3 = attributeNames.length; _j2 < _l3; _j2++) {\n        var _name5 = attributeNames[_j2];\n\n        var _attribute2 = geometry.getAttribute(_name5);\n\n        var _morphAttr = geometry.morphAttributes[_name5];\n        var _itemSize = _attribute2.itemSize;\n        var newarray = attrArrays[_name5];\n        var newMorphArrays = morphAttrsArrays[_name5];\n\n        for (var _k = 0; _k < _itemSize; _k++) {\n          var getterFunc = getters[_k];\n          newarray.push(_attribute2[getterFunc](index));\n\n          if (_morphAttr) {\n            for (var m = 0, ml = _morphAttr.length; m < ml; m++) {\n              newMorphArrays[m].push(_morphAttr[m][getterFunc](index));\n            }\n          }\n        }\n      }\n\n      hashToIndex[hash] = nextIndex;\n      newIndices.push(nextIndex);\n      nextIndex++;\n    }\n  } // Generate typed arrays from new attribute arrays and update\n  // the attributeBuffers\n\n\n  var result = geometry.clone();\n\n  for (var _i5 = 0, _l4 = attributeNames.length; _i5 < _l4; _i5++) {\n    var _name6 = attributeNames[_i5];\n    var oldAttribute = geometry.getAttribute(_name6);\n    var buffer = new oldAttribute.array.constructor(attrArrays[_name6]);\n\n    var _attribute3 = new BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);\n\n    result.setAttribute(_name6, _attribute3); // Update the attribute arrays\n\n    if (_name6 in morphAttrsArrays) {\n      for (var _j3 = 0; _j3 < morphAttrsArrays[_name6].length; _j3++) {\n        var oldMorphAttribute = geometry.morphAttributes[_name6][_j3];\n\n        var _buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[_name6][_j3]);\n\n        var morphAttribute = new BufferAttribute(_buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized);\n        result.morphAttributes[_name6][_j3] = morphAttribute;\n      }\n    }\n  } // indices\n\n\n  result.setIndex(newIndices);\n  return result;\n}\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry>}\n */\n\n\nfunction toTrianglesDrawMode(geometry, drawMode) {\n  if (drawMode === TrianglesDrawMode) {\n    console.warn('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.');\n    return geometry;\n  }\n\n  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {\n    var index = geometry.getIndex(); // generate index if not present\n\n    if (index === null) {\n      var indices = [];\n      var position = geometry.getAttribute('position');\n\n      if (position !== undefined) {\n        for (var i = 0; i < position.count; i++) {\n          indices.push(i);\n        }\n\n        geometry.setIndex(indices);\n        index = geometry.getIndex();\n      } else {\n        console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n        return geometry;\n      }\n    } //\n\n\n    var numberOfTriangles = index.count - 2;\n    var newIndices = [];\n\n    if (drawMode === TriangleFanDrawMode) {\n      // gl.TRIANGLE_FAN\n      for (var _i6 = 1; _i6 <= numberOfTriangles; _i6++) {\n        newIndices.push(index.getX(0));\n        newIndices.push(index.getX(_i6));\n        newIndices.push(index.getX(_i6 + 1));\n      }\n    } else {\n      // gl.TRIANGLE_STRIP\n      for (var _i7 = 0; _i7 < numberOfTriangles; _i7++) {\n        if (_i7 % 2 === 0) {\n          newIndices.push(index.getX(_i7));\n          newIndices.push(index.getX(_i7 + 1));\n          newIndices.push(index.getX(_i7 + 2));\n        } else {\n          newIndices.push(index.getX(_i7 + 2));\n          newIndices.push(index.getX(_i7 + 1));\n          newIndices.push(index.getX(_i7));\n        }\n      }\n    }\n\n    if (newIndices.length / 3 !== numberOfTriangles) {\n      console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n    } // build final geometry\n\n\n    var newGeometry = geometry.clone();\n    newGeometry.setIndex(newIndices);\n    newGeometry.clearGroups();\n    return newGeometry;\n  } else {\n    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);\n    return geometry;\n  }\n}\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\n\n\nfunction computeMorphedAttributes(object) {\n  if (object.geometry.isBufferGeometry !== true) {\n    console.error('THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.');\n    return null;\n  }\n\n  var _vA = new Vector3();\n\n  var _vB = new Vector3();\n\n  var _vC = new Vector3();\n\n  var _tempA = new Vector3();\n\n  var _tempB = new Vector3();\n\n  var _tempC = new Vector3();\n\n  var _morphA = new Vector3();\n\n  var _morphB = new Vector3();\n\n  var _morphC = new Vector3();\n\n  function _calculateMorphedAttributeData(object, material, attribute, morphAttribute, morphTargetsRelative, a, b, c, modifiedAttributeArray) {\n    _vA.fromBufferAttribute(attribute, a);\n\n    _vB.fromBufferAttribute(attribute, b);\n\n    _vC.fromBufferAttribute(attribute, c);\n\n    var morphInfluences = object.morphTargetInfluences;\n\n    if (material.morphTargets && morphAttribute && morphInfluences) {\n      _morphA.set(0, 0, 0);\n\n      _morphB.set(0, 0, 0);\n\n      _morphC.set(0, 0, 0);\n\n      for (var _i8 = 0, _il = morphAttribute.length; _i8 < _il; _i8++) {\n        var influence = morphInfluences[_i8];\n        var morph = morphAttribute[_i8];\n        if (influence === 0) continue;\n\n        _tempA.fromBufferAttribute(morph, a);\n\n        _tempB.fromBufferAttribute(morph, b);\n\n        _tempC.fromBufferAttribute(morph, c);\n\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n\n          _morphB.addScaledVector(_tempB, influence);\n\n          _morphC.addScaledVector(_tempC, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n          _morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n          _morphC.addScaledVector(_tempC.sub(_vC), influence);\n        }\n      }\n\n      _vA.add(_morphA);\n\n      _vB.add(_morphB);\n\n      _vC.add(_morphC);\n    }\n\n    if (object.isSkinnedMesh) {\n      object.boneTransform(a, _vA);\n      object.boneTransform(b, _vB);\n      object.boneTransform(c, _vC);\n    }\n\n    modifiedAttributeArray[a * 3 + 0] = _vA.x;\n    modifiedAttributeArray[a * 3 + 1] = _vA.y;\n    modifiedAttributeArray[a * 3 + 2] = _vA.z;\n    modifiedAttributeArray[b * 3 + 0] = _vB.x;\n    modifiedAttributeArray[b * 3 + 1] = _vB.y;\n    modifiedAttributeArray[b * 3 + 2] = _vB.z;\n    modifiedAttributeArray[c * 3 + 0] = _vC.x;\n    modifiedAttributeArray[c * 3 + 1] = _vC.y;\n    modifiedAttributeArray[c * 3 + 2] = _vC.z;\n  }\n\n  var geometry = object.geometry;\n  var material = object.material;\n  var a, b, c;\n  var index = geometry.index;\n  var positionAttribute = geometry.attributes.position;\n  var morphPosition = geometry.morphAttributes.position;\n  var morphTargetsRelative = geometry.morphTargetsRelative;\n  var normalAttribute = geometry.attributes.normal;\n  var morphNormal = geometry.morphAttributes.position;\n  var groups = geometry.groups;\n  var drawRange = geometry.drawRange;\n  var i, j, il, jl;\n  var group, groupMaterial;\n  var start, end;\n  var modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);\n  var modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);\n\n  if (index !== null) {\n    // indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = index.getX(j);\n          b = index.getX(j + 1);\n          c = index.getX(j + 2);\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(index.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = index.getX(i);\n        b = index.getX(i + 1);\n        c = index.getX(i + 2);\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  } else if (positionAttribute !== undefined) {\n    // non-indexed buffer geometry\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        groupMaterial = material[group.materialIndex];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = j;\n          b = j + 1;\n          c = j + 2;\n\n          _calculateMorphedAttributeData(object, groupMaterial, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n          _calculateMorphedAttributeData(object, groupMaterial, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n      for (i = start, il = end; i < il; i += 3) {\n        a = i;\n        b = i + 1;\n        c = i + 2;\n\n        _calculateMorphedAttributeData(object, material, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n\n        _calculateMorphedAttributeData(object, material, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  }\n\n  var morphedPositionAttribute = new Float32BufferAttribute(modifiedPosition, 3);\n  var morphedNormalAttribute = new Float32BufferAttribute(modifiedNormal, 3);\n  return {\n    positionAttribute: positionAttribute,\n    normalAttribute: normalAttribute,\n    morphedPositionAttribute: morphedPositionAttribute,\n    morphedNormalAttribute: morphedNormalAttribute\n  };\n}\n\nexport { computeTangents, mergeBufferGeometries, mergeBufferAttributes, interleaveAttributes, estimateBytesUsed, mergeVertices, toTrianglesDrawMode, computeMorphedAttributes };","map":{"version":3,"sources":["/home/sheikh-spear/Cybreach/PersonnalWebsite/node_modules/three/examples/jsm/utils/BufferGeometryUtils.js"],"names":["BufferAttribute","BufferGeometry","Float32BufferAttribute","InterleavedBuffer","InterleavedBufferAttribute","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Vector3","computeTangents","geometry","console","warn","mergeBufferGeometries","geometries","useGroups","isIndexed","index","attributesUsed","Set","Object","keys","attributes","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","i","length","attributesCount","error","name","has","undefined","push","size","userData","mergedUserData","count","position","addGroup","indexOffset","mergedIndex","j","getX","setIndex","mergedAttribute","mergeBufferAttributes","setAttribute","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","itemSize","normalized","arrayLength","attribute","isInterleavedBufferAttribute","array","constructor","set","interleaveAttributes","stride","l","interleavedBuffer","res","getters","setters","iba","c","k","estimateBytesUsed","mem","attr","getAttribute","BYTES_PER_ELEMENT","indices","getIndex","mergeVertices","tolerance","Math","max","Number","EPSILON","hashToIndex","positions","vertexCount","nextIndex","attributeNames","attrArrays","morphAttrsArrays","newIndices","morphAttr","Array","fill","map","decimalShift","log10","shiftMultiplier","pow","hash","newarray","newMorphArrays","getterFunc","m","ml","result","clone","oldAttribute","buffer","oldMorphAttribute","morphAttribute","toTrianglesDrawMode","drawMode","numberOfTriangles","newGeometry","clearGroups","computeMorphedAttributes","object","isBufferGeometry","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_calculateMorphedAttributeData","material","a","b","modifiedAttributeArray","fromBufferAttribute","morphInfluences","morphTargetInfluences","morphTargets","il","influence","morph","addScaledVector","sub","add","isSkinnedMesh","boneTransform","x","y","z","positionAttribute","morphPosition","normalAttribute","normal","morphNormal","groups","drawRange","jl","group","groupMaterial","start","end","modifiedPosition","Float32Array","modifiedNormal","isArray","materialIndex","min","morphedPositionAttribute","morphedNormalAttribute"],"mappings":"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","sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3\n} from 'three';\n\n\nfunction computeTangents( geometry ) {\n\n\tgeometry.computeTangents();\n\tconsole.warn( 'THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead.' );\n\n}\n\n/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\nfunction mergeBufferGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\t// gather .userData\n\n\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeBufferAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\nfunction mergeBufferAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tarray.set( attributes[ i ].array, offset );\n\n\t\toffset += attributes[ i ].array.length;\n\n\t}\n\n\treturn new BufferAttribute( array, itemSize, normalized );\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry>}\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst attrArrays = {};\n\tconst morphAttrsArrays = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t// initialize the arrays\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\n\t\tattrArrays[ name ] = [];\n\n\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\tif ( morphAttr ) {\n\n\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst decimalShift = Math.log10( 1 / tolerance );\n\tconst shiftMultiplier = Math.pow( 10, decimalShift );\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the attribute arrays\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newarray = attrArrays[ name ];\n\t\t\t\tconst newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// Generate typed arrays from new attribute arrays and update\n\t// the attributeBuffers\n\tconst result = geometry.clone();\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst oldAttribute = geometry.getAttribute( name );\n\n\t\tconst buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\tconst attribute = new BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\tresult.setAttribute( name, attribute );\n\n\t\t// Update the attribute arrays\n\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\tfor ( let j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\tconst oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\tconst buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\tconst morphAttribute = new BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry>}\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tif ( object.geometry.isBufferGeometry !== true ) {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.' );\n\t\treturn null;\n\n\t}\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tmaterial,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.boneTransform( a, _vA );\n\t\t\tobject.boneTransform( b, _vB );\n\t\t\tobject.boneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group, groupMaterial;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tmaterial,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tmaterial,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else if ( positionAttribute !== undefined ) {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tmaterial,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tmaterial,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\n\n\nexport {\n\tcomputeTangents,\n\tmergeBufferGeometries,\n\tmergeBufferAttributes,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n};\n"]},"metadata":{},"sourceType":"module"}